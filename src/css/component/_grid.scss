// grid system

// container
*,
*::before,
*::after
{
	box-sizing: border-box;
}
.container {
	width: $base-width;
	padding-right: ($grid-gutter-width / 2);
	padding-left: ($grid-gutter-width / 2);
	margin-right: auto;
	margin-left: auto;
	@each $key, $value in $breakpoints {
		@media #{$value} {
			width: map-get($container-width, $key);
		}
	}
}
.container-fluid {
	width: 100%;
	padding-right: ($grid-gutter-width / 2);
	padding-left: ($grid-gutter-width / 2);
	margin-right: auto;
	margin-left: auto;
}

// row
.row {
	display: -ms-flexbox;
  display: flex;
  -ms-flex-wrap: wrap;
  flex-wrap: wrap;
	margin-right: ($grid-gutter-width / -2);
	margin-left: ($grid-gutter-width / -2);
}

.no-gutters {
margin-right: 0;
margin-left: 0;

	> .col,
	> [class*="col-"] {
		padding-right: 0;
		padding-left: 0;
	}
}

// column
%grid-column {
  position: relative;
  width: 100%;
	padding-right: ($grid-gutter-width / 2);
	padding-left: ($grid-gutter-width / 2);
}
@each $breakpoint in map-keys($breakpoints) {
	@for $i from 1 through $grid-columns {
		.col-#{$i} {
			@extend %grid-column;
		}
	}
	@for $i from 1 through $grid-columns {
		.col-#{$i}-#{$breakpoint} {
			@extend %grid-column;
		}
	}
}

@include mq-classes {
	@for $i from 1 through $grid-columns {
		.col-#{$i}#{$bp-infix}  {
			-ms-flex: 0 0 percentage($i/$grid-columns);
			flex: 0 0 percentage($i/$grid-columns);
			max-width: percentage($i/$grid-columns);
		}
	}
}

// order
@include mq-classes {
	.order-first#{$bp-infix} {
		order: -1;
	}
		.order-last#{$bp-infix} {
		order: $grid-columns + 1;
	}
	@for $i from 0 through $grid-columns {
		.order-#{$i}#{$bp-infix} {
			order: $i;
		}
	}
}

// offset
@include mq-classes {
	@for $i from 1 through $grid-columns {
		.offset-#{$i}#{$bp-infix}  {
			margin-left: percentage($i/$grid-columns);
		}
	}
}
